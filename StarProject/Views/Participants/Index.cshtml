@model StarProject.ViewModel.ParticipantsIndexVm
@using StarProject.ViewModel
@using System.Linq

@{
    ViewData["Title"] = "報名管理";
    var cards = Model?.Cards ?? new List<EventCardVm>();
}

@Html.AntiForgeryToken()

<!-- 標題 & 匯出「全部」 -->
<div class="d-flex align-items-center justify-content-between mb-3">
    <h1 class="fw-bold text-black">報名管理</h1>
    <div class="d-flex gap-2 flex-wrap">
        <a class="btn btn-warning text-dark" asp-controller="Participants" asp-action="Create">
            <i class="fi fi-sr-alien"></i> 新增
        </a>

        <!-- 跟 _ParticipantsTable 風格一致：細框、btn-sm、方角、帶圖示 -->
        <a class="btn btn-outline-success btn-export"
           asp-controller="Participants" asp-action="ExportExcel">
            <i class="fa-solid fa-file-excel me-1"></i> 匯出全部 Excel
        </a>
        <a class="btn btn-outline-primary btn-export"
           asp-controller="Participants" asp-action="ExportCsv">
            <i class="fa-solid fa-file-csv me-1"></i> 匯出全部 CSV
        </a>
    </div>
</div>

<hr />

<!-- 卡片網格-->
<section class="wrapper">
    <div class="container">
        <div class="row row-cols-1 row-cols-md-2 row-cols-lg-4 g-4" id="eventCardGrid">
            @if (!cards.Any())
            {
                <div class="col-12">
                    <div class="alert alert-warning mb-0">目前沒有可顯示的活動。</div>
                </div>
            }
            else
            {
                @foreach (var e in cards)
                {
                    var raw = e.CoverImageUrl ?? "";
                    string bg;
                    if (string.IsNullOrWhiteSpace(raw))
                    {
                        bg = "https://images.unsplash.com/photo-1444703686981-a3abbc4d4fe3?q=80&w=1400&auto=format&fit=crop";
                    }
                    else if (raw.StartsWith("http", StringComparison.OrdinalIgnoreCase))
                    {
                        bg = raw;
                    }
                    else
                    {
                        var normalized = (raw.StartsWith("~/") || raw.StartsWith("/")) ? raw : $"~/uploads/{raw}";
                        bg = Url.Content(normalized);
                    }

                    var rawStatus = (e.Status ?? "").Trim();
                    var norm = rawStatus.ToLowerInvariant();

                    string[] openKeys = new[] { "報名中", "開放報名", "open", "進行中", "ongoing", "進行" };
                    string[] endKeys = new[] { "已結束", "結束", "已截止", "截止", "closed", "ended", "end", "完結" };
                    string[] cancelKeys = new[] { "已取消", "取消", "cancel", "canceled", "cancelled" };

                    bool isCancelled = cancelKeys.Any(k => norm.Contains(k.ToLowerInvariant()));
                    bool isEnded = !isCancelled && endKeys.Any(k => norm.Contains(k.ToLowerInvariant()));
                    bool isOpen = !isCancelled && !isEnded && openKeys.Any(k => norm.Contains(k.ToLowerInvariant()));

                    string statusLabel, pillClass, statusIcon;
                    if (isCancelled) { statusLabel = "已取消"; pillClass = "pill-cancelled"; statusIcon = "bi bi-x-circle-fill"; }
                    else if (isEnded) { statusLabel = "已結束"; pillClass = "pill-ended"; statusIcon = "bi bi-check-circle-fill"; }
                    else if (isOpen) { statusLabel = "報名中"; pillClass = "pill-open"; statusIcon = "bi bi-play-fill"; }
                    else { statusLabel = string.IsNullOrEmpty(rawStatus) ? "狀態未設定" : rawStatus; pillClass = "pill-ended"; statusIcon = "bi bi-info-circle-fill"; }

                    <div class="col">
                        <div class="card h-100 event-card position-relative shadow-sm cardDetail"
                             data-event-id="@e.No"
                             data-event-title="@e.Title"
                             role="button"
                             aria-label="檢視 @e.Title 的報名名單">

                            <div class="card-thumb" style="background-image:url('@bg');" aria-label="@e.Title"></div>

                            <div class="card-body d-flex flex-column">
                                <h5 class="card-title fw-bold text-truncate mb-2" title="@e.Title">@e.Title</h5>

                                <div class="d-flex align-items-center gap-2 text-muted mb-1">
                                    <i class="far fa-clock"></i>
                                    <small>@e.StartDate.ToString("yyyy/MM/dd HH:mm")</small>
                                </div>

                                <div class="d-flex align-items-center gap-2 text-muted">
                                    <i class="bi bi-people"></i>
                                    <small>@e.CurrentCount / @e.MaxParticipants 人</small>
                                </div>

                                <div class="status-pill @pillClass">
                                    <i class="@statusIcon"></i>
                                    <span class="ms-1">@statusLabel</span>
                                </div>

                                <a class="stretched-link" href="javascript:void(0)"></a>
                            </div>
                        </div>
                    </div>
                }
            }
        </div>
    </div>
</section>

<!-- Modal：顯示單一活動的參與者名單 -->
<div class="modal fade" id="participantsModal" tabindex="-1" aria-labelledby="participantsModalLabel" aria-hidden="true" data-bs-backdrop="static" data-bs-keyboard="false">
    <div class="modal-dialog modal-dialog-centered modal-dialog-scrollable modal-xl">
        <div class="modal-content">
            <div class="modal-header d-flex justify-content-between align-items-center">
                <div>
                    <h4 class="modal-title fw-bold mb-1" id="participantsModalLabel">參與者名單</h4>
                    <div class="small text-muted" id="participantsModalSub">活動編號：<span id="modalEventId">-</span></div>
                </div>

                <!-- 匯出按鈕區 -->
                <div class="d-flex gap-2">
                    <a class="btn btn-outline-primary" id="btnExportCsv" target="_blank" rel="noopener">
                        <i class="fa-solid fa-file-csv me-1"></i> 匯出 CSV（本活動）
                    </a>
                    <a class="btn btn-outline-success" id="btnExportExcel" target="_blank" rel="noopener">
                        <i class="fa-solid fa-file-excel me-1"></i> 匯出 Excel（本活動）
                    </a>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="關閉"></button>
                </div>
            </div>

            <div class="modal-body">
                <div id="participantsTableContainer" class="position-relative" style="min-height:180px">
                    <div class="text-center text-muted py-5" id="tableLoading">
                        <div class="spinner-border spinner-border-sm me-2" role="status"></div>
                        載入中…
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@section Styles {
    <style>
        h1 {
            color: #000000;
        }

        .wrapper {
            margin: 2rem 0;
        }

        .event-card {
            border: none;
            border-radius: 16px;
            overflow: hidden;
            background: #fff;
            transition: transform .25s ease, box-shadow .25s ease;
            position: relative;
        }

            .event-card:hover {
                transform: translateY(-2px);
                box-shadow: 0 8px 24px rgba(0,0,0,.18);
            }

        .card-thumb {
            aspect-ratio: 16/9;
            width: 100%;
            background-size: cover;
            background-position: center;
            background-repeat: no-repeat;
        }

        .card-body {
            position: relative;
            padding: 14px 16px 16px 16px;
        }

        .card-title {
            line-height: 1.25;
        }

        .event-card .stretched-link::after {
            z-index: 1;
        }

        .status-pill {
            position: absolute;
            right: 12px;
            bottom: 12px;
            display: inline-flex;
            align-items: center;
            padding: 6px 10px;
            border-radius: 999px;
            font-size: .85rem;
            font-weight: 700;
            z-index: 2;
            pointer-events: none;
            background: rgba(255,255,255,.9);
            color: #222;
            box-shadow: 0 2px 6px rgba(0,0,0,.08);
        }

            .status-pill .bi {
                font-size: 1rem;
                line-height: 1;
            }

        .pill-open {
            background: rgba(13,110,253,.95);
            color: #fff;
        }

        .pill-ended {
            background: rgba(222,226,230,.95);
            color: #333;
        }

        .pill-cancelled {
            background: rgba(220,53,69,.95);
            color: #fff;
        }

        @@media (min-width:992px) {
            .event-card {
                min-height: 320px;
            }
        }

        @@media (max-width:991.98px) {
            .event-card {
                min-height: 300px;
            }
        }

        #participantsTableContainer table td,
        #participantsTableContainer table th {
            vertical-align: middle;
        }
        /* ===== 按鈕強化 ===== */
        .btn-outline-primary.btn-sm i,
        .btn-outline-danger.btn-sm i {
            pointer-events: none;
        }

        .btn-outline-primary.btn-sm:is(:hover,:focus) {
            box-shadow: 0 0 0 .2rem rgba(13,110,253,.15);
        }

        .btn-outline-danger.btn-sm:is(:hover,:focus) {
            box-shadow: 0 0 0 .2rem rgba(220,53,69,.12);
        }

        /* 載入中狀態 */
        .btn-loading {
            position: relative;
            pointer-events: none;
            opacity: .8;
        }

        .btn-loading > i {
            visibility: hidden;
        }

        .btn-loading::after {
            content: "";
            position: absolute;
            inset: 0;
            margin: auto;
            width: 1rem;
            height: 1rem;
            border-radius: 50%;
            border: 2px solid currentColor;
            border-right-color: transparent;
            animation: spin .6s linear infinite;
        }

        /* 抖動動畫（錯誤時套用 .shake） */
        @@keyframes shake {
            10%, 90% {
                transform: translateX(-1px);
            }

            20%, 80% {
                transform: translateX( 2px);
            }

            30%, 50%, 70% {
                transform: translateX(-4px);
            }

            40%, 60% {
                transform: translateX( 4px);
            }
        }

        .shake {
            animation: shake .45s ease both;
        }

        @@media (prefers-reduced-motion: reduce) {
            .shake {
                animation: none !important;
            }
        }

        /* 匯出鈕一致化（可選） */
        #btnExportCsv, #btnExportExcel {
            white-space: nowrap;
        }

        /* 與 _ParticipantsTable 對齊的小顆細框按鈕 */
        .btn-export {
            display: inline-flex;
            align-items: center; /* 垂直置中 */
            justify-content: center; /* 內容置中 */
            gap: .5rem; /* 圖示與文字間距 */
            font-size: 1rem; /* 比 btn-sm 大一號，接近黃色按鈕 */
            font-weight: 600;
            padding: .48rem .9rem; /* 視覺高度與黃色按鈕差不多 */
            border-radius: var(--bs-border-radius-lg); /* 更圓，但不是膠囊 */
            white-space: nowrap; /* 不換行 */
            line-height: 1.2;
        }

        .btn-export i {
            pointer-events: none;
                transform: translateY(0.5px);
        }

        /* hover/focus 陰影一致 */
        .btn-outline-success.btn-sm:is(:hover, :focus) {
            box-shadow: 0 0 0 .2rem rgba(25,135,84,.15);
        }

        .btn-outline-primary.btn-sm:is(:hover, :focus) {
            box-shadow: 0 0 0 .2rem rgba(13,110,253,.15);
        }

    </style>
}

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            console.log('Index script loaded');

            let currentEventId = 0;

            // API 路徑
            const listUrl = '@Url.Action("ListByEvent", "Participants")';
            const csvUrl  = '@Url.Action("ExportCsv", "Participants")';
            const xlsUrl  = '@Url.Action("ExportExcel", "Participants")';
            const bulkUrl = '@Url.Action("BulkDelete", "Participants")';

            const modalEl = document.getElementById('participantsModal');
            const modal   = bootstrap.Modal.getOrCreateInstance(modalEl); // 避免重複建立

            // ── 通用：清理殘留 backdrop 與 body 狀態 ──────────────────────────────
            function cleanupModalArtifacts() {
                // 移除所有殘留的 backdrop
                document.querySelectorAll('.modal-backdrop').forEach(el => el.remove());
                // 移除 body 狀態
                document.body.classList.remove('modal-open');
                document.body.style.removeProperty('overflow');
                document.body.style.removeProperty('padding-right');
            }

            // 當 Modal 完全關閉時，一律清理一次（保險）
            modalEl.addEventListener('hidden.bs.modal', () => {
                cleanupModalArtifacts();
            });

            // ✅ 新增：重寄確認信的 API 路徑
            const resendUrl = '@Url.Action("ResendSignup", "Participants")';

            // 小工具：切換按鈕的 loading 狀態
            function setBtnLoading(btn, on) {
            if (!btn) return;
            if (on) { btn.classList.add('btn-loading'); btn.setAttribute('disabled', 'disabled'); }
            else { btn.classList.remove('btn-loading'); btn.removeAttribute('disabled'); }
        }


            // 卡片點擊 → 顯示 Modal + 載入名單
            document.addEventListener('click', function (e) {
                const card = e.target.closest('.cardDetail');
                if (!card) return;

                e.preventDefault();
                e.stopPropagation();

                currentEventId = Number(card.getAttribute('data-event-id')) || 0;
                const title = card.getAttribute('data-event-title') || '參與者名單';

                const modalTitle = document.getElementById('participantsModalLabel');
                const modalEventId = document.getElementById('modalEventId');
                if (modalTitle) modalTitle.textContent = title;
                if (modalEventId) modalEventId.textContent = currentEventId;

                const btnExportCsv = document.getElementById('btnExportCsv');
                const btnExportExcel = document.getElementById('btnExportExcel');
                if (btnExportCsv) btnExportCsv.href = `${csvUrl}?eventId=${currentEventId}`;
                if (btnExportExcel) btnExportExcel.href = `${xlsUrl}?eventId=${currentEventId}`;

                loadParticipantsTable(currentEventId).then(() => {
                    modal.show();
                });
            });

            // 載入參與者列表（PartialView）
            async function loadParticipantsTable(eventId) {
                const container = document.getElementById('participantsTableContainer');
                if (!container) return;

                container.innerHTML = `
                    <div class="text-center text-muted py-5" id="tableLoading">
                        <div class="spinner-border spinner-border-sm me-2" role="status"></div>
                        載入中…
                    </div>`;

                try {
                    const url = `${listUrl}?eventId=${encodeURIComponent(eventId)}`;
                    const response = await fetch(url, {
                        method: 'GET',
                        headers: {
                            'X-Requested-With': 'XMLHttpRequest',
                            'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8'
                        },
                        cache: 'no-store',
                        redirect: 'manual'
                    });

                    if (response.type === 'opaqueredirect' || response.status === 0) {
                        throw new Error('已被重導，可能需要重新登入。');
                    }

                    if (!response.ok) {
                        throw new Error(`HTTP ${response.status}: ${response.statusText}`);
                    }

                    const html = await response.text();
                    if (!html || html.trim().length === 0) {
                        throw new Error('回應內容為空');
                    }
                    // 粗略偵測是否整頁（避免誤把整頁塞進 container）
                    if (html.toLowerCase().includes('<html') && html.toLowerCase().includes('<body')) {
                        throw new Error('伺服器回傳整頁 HTML，請確認 Action 是否只回傳 PartialView。');
                    }

                    container.innerHTML = html;
                } catch (error) {
                    console.error('載入參與者列表失敗:', error);
                    container.innerHTML = `
                        <div class="alert alert-danger mb-0">
                            <i class="bi bi-exclamation-triangle me-2"></i>
                            載入失敗：${error.message || error}
                            <br><small>請檢查權限或重新整理頁面</small>
                        </div>`;
                }
            }

            // 取得防偽 Token
            function getAntiForgeryToken() {
                const el = document.querySelector('#participantsTableContainer input[name="__RequestVerificationToken"]')
                    || document.querySelector('input[name="__RequestVerificationToken"]');
                return el?.value || '';
            }

            // 批次刪除（共用）
            async function performBulkDelete(eventId, ids) {
                try {
                    const token = getAntiForgeryToken();
                    if (!token) throw new Error('找不到防偽 Token，請重新整理頁面');

                    const formData = new FormData();
                    formData.append('__RequestVerificationToken', token);
                    formData.append('eventId', String(eventId));
                    ids.forEach(id => formData.append('ids', String(id)));

                    const response = await fetch(bulkUrl, {
                        method: 'POST',
                        body: formData,
                        headers: { 'X-Requested-With': 'XMLHttpRequest' }
                    });

                    if (!response.ok) {
                        throw new Error(`HTTP ${response.status}: ${response.statusText}`);
                    }

                    const contentType = response.headers.get('content-type') || '';
                    if (!contentType.includes('application/json')) {
                        const text = await response.text();
                        console.error('Unexpected response:', text.substring(0, 300));
                        throw new Error('伺服器回應格式錯誤（非 JSON）');
                    }

                    const result = await response.json();
                    if (!result.success) throw new Error(result.message || '刪除失敗');

                    // ✅ 刷新表格
                    await loadParticipantsTable(eventId);

                    // ✅ 強制清理任何殘留遮罩
                    cleanupModalArtifacts();

                    // 成功提示（若無 Swal 就用 alert）
                    if (typeof Swal !== 'undefined') {
                        Swal.fire({ icon: 'success', title: '刪除成功', text: result.message || `已刪除 ${ids.length} 筆資料`, timer: 1600, showConfirmButton: false });
                    } else {
                        console.log('刪除成功');
                    }
                } catch (error) {
                    console.error('批次刪除錯誤:', error);
                    alert('刪除失敗：' + (error.message || error));
                    // 防守：遇到例外也清一次
                    cleanupModalArtifacts();
                }
            }

            // 事件：批次刪除按鈕（在 Partial 裡面的 #btnBulkDelete）
            document.addEventListener('click', async function (e) {
                const bulkBtn = e.target.closest('#btnBulkDelete');
                if (!bulkBtn) return;

                e.preventDefault();

                if (!currentEventId) {
                    alert('請先選擇一個活動。');
                    return;
                }

                const checkedBoxes = Array.from(
                    document.querySelectorAll('#participantsTableContainer tbody input[name="ids"]:checked')
                );
                const ids = checkedBoxes.map(cb => Number(cb.value)).filter(id => !isNaN(id) && id > 0);

                if (ids.length === 0) {
                    alert('請先勾選要刪除的項目。');
                    return;
                }

                if (!confirm(`確定刪除 ${ids.length} 筆報名資料嗎？此操作無法復原。`)) return;

                await performBulkDelete(currentEventId, ids);
            });

            // 事件：單筆刪除（在 Partial 裡面的 .js-row-delete）
            document.addEventListener('click', async function (e) {
                const deleteBtn = e.target.closest('.js-row-delete');
                if (!deleteBtn) return;

                e.preventDefault();

                const id = Number(deleteBtn.dataset.id);
                const eventId = currentEventId || Number(document.getElementById('modalEventId')?.textContent || 0);

                if (!id || !eventId) {
                    alert('刪除失敗：找不到必要的參數');
                    return;
                }

                if (!confirm('確定刪除這筆報名資料嗎？此操作無法復原。')) return;

                await performBulkDelete(eventId, [id]);
            });

                    // 事件：重寄確認信（在 Partial 裡面的 .js-resend）
        document.addEventListener('click', async function (e) {
            const btn = e.target.closest('.js-resend');
            if (!btn) return;

            e.preventDefault();

            const id = Number(btn.dataset.id);
            if (!id) {
                alert('重寄失敗：找不到參與者編號');
                return;
            }

            const token = getAntiForgeryToken();
            if (!token) {
                alert('重寄失敗：找不到驗證 Token，請重新整理頁面');
                return;
            }

            try {
                setBtnLoading(btn, true);

                const form = new FormData();
                form.append('__RequestVerificationToken', token);
                form.append('id', String(id));

                const resp = await fetch(resendUrl, {
                    method: 'POST',
                    headers: {
                        'X-Requested-With': 'XMLHttpRequest',
                        // ⬇ 這行可強化相容性（部分站台設定只收 Header）
                        'RequestVerificationToken': token
                    },
                    body: form
                });

                if (resp.status === 400 || resp.status === 401 || resp.status === 403) {
                    throw new Error('驗證失敗（可能缺少或過期的 Anti-Forgery Token），請重新整理頁面再試。');
                }
                if (!resp.ok) throw new Error(`HTTP ${resp.status}`);

                const data = await resp.json();
                if (data.success) {
                    if (typeof Swal !== 'undefined') {
                        Swal.fire({ icon: 'success', title: '已重寄', text: data.message || '報名確認信已重新發送', timer: 1600, showConfirmButton: false });
                    } else {
                        alert(data.message || '已重新發送確認信');
                    }
                } else {
                    btn.classList.add('shake');
                    setTimeout(() => btn.classList.remove('shake'), 500);
                    if (typeof Swal !== 'undefined') {
                        Swal.fire({ icon: 'error', title: '重寄失敗', text: data.message || '請稍後再試' });
                    } else {
                        alert('重寄失敗：' + (data.message || '請稍後再試'));
                    }
                }
            } catch (err) {
                btn.classList.add('shake');
                setTimeout(() => btn.classList.remove('shake'), 500);
                alert('重寄失敗：' + (err.message || err));
            } finally {
                setBtnLoading(btn, false);
            }
        });
                // === 全選/反選：工具函式，依勾選狀態更新 header 的 indeterminate ===
        function updateCheckAllState() {
            const container = document.getElementById('participantsTableContainer');
            if (!container) return;
            const all = Array.from(container.querySelectorAll('tbody input[name="ids"]:not(:disabled)'));
            const checkAllBox = container.querySelector('#checkAll[data-check-all]');
            if (!checkAllBox) return;

            const checkedCount = all.filter(cb => cb.checked).length;
            if (all.length === 0) {
                checkAllBox.checked = false;
                checkAllBox.indeterminate = false;
                return;
            }
            if (checkedCount === 0) {
                checkAllBox.checked = false;
                checkAllBox.indeterminate = false;
            } else if (checkedCount === all.length) {
                checkAllBox.checked = true;
                checkAllBox.indeterminate = false;
            } else {
                checkAllBox.checked = false;
                checkAllBox.indeterminate = true;
            }
        }

        // === 事件委派：按「全選框」→ 勾選/取消所有列 ===
        document.addEventListener('change', function (e) {
            const container = document.getElementById('participantsTableContainer');
            if (!container) return;

            // 點了表頭的全選框
            if (e.target.matches('#participantsTableContainer #checkAll, #participantsTableContainer #checkAll[data-check-all]')) {
                const isChecked = e.target.checked;
                container
                    .querySelectorAll('tbody input[name="ids"]:not(:disabled)')
                    .forEach(cb => cb.checked = isChecked);
                updateCheckAllState();
                return;
            }

            // 單列 checkbox 勾選變更 → 更新 header 狀態
            if (e.target.matches('#participantsTableContainer tbody input[name="ids"]')) {
                updateCheckAllState();
            }
        });



            console.log('Index script setup complete');
        });
    </script>
}
